import re
import json
import logging
import random
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.db import connection
from django.core.cache import cache

logger = logging.getLogger(__name__)

# Precargar datos de smartphones
try:
    with connection.cursor() as cursor:
        cursor.execute("SELECT * FROM smartphones")
        columns = [col[0] for col in cursor.description]
        smartphones_data = [dict(zip(columns, row)) for row in cursor.fetchall()]
        logger.info(f"Base de datos cargada con {len(smartphones_data)} celulares")
        
        # Crear √≠ndice por modelo para b√∫squedas m√°s r√°pidas
        phone_index = {phone['model'].lower(): phone for phone in smartphones_data}
except Exception as e:
    logger.error(f"Error al cargar smartphones: {str(e)}")
    smartphones_data = []
    phone_index = {}

# Listas de respuestas naturales
GREETINGS = [
    "¬°Hola! üëã Soy tu asistente de tecnolog√≠a. ¬øEn qu√© puedo ayudarte hoy?",
    "¬°Hola! üòä Estoy aqu√≠ para ayudarte a encontrar el smartphone perfecto. ¬øQu√© necesitas saber?",
    "¬°Buen d√≠a! üì± Cu√©ntame, ¬øqu√© tipo de celular est√°s buscando?"
]

HELP_RESPONSES = [
    "Claro que s√≠, puedo ayudarte con:",
    "Por supuesto, aqu√≠ tienes algunas opciones:",
    "Con gusto, estas son las cosas en las que te puedo ayudar:"
]

FAREWELLS = [
    "¬°Ha sido un placer ayudarte! Si necesitas algo m√°s, aqu√≠ estar√©. üòä",
    "Espero haberte ayudado. ¬°Vuelve cuando quieras! üëã",
    "¬°Hasta luego! Que disfrutes tu nuevo smartphone cuando lo elijas. üì±"
]

PRICE_COMMENTS = {
    'low': [" (¬°Una ganga! üí∞)", " (Precio imbatible)", " (Muy accesible)"],
    'mid': [" (Buena relaci√≥n calidad-precio)", " (Precio justo por lo que ofrece)"],
    'high': [" (Inversi√≥n premium üíé)", " (Para quienes buscan lo mejor)"]
}

COMPARISON_PROMPTS = [
    "¬øQu√© modelos te gustar√≠a comparar? Puedes decirme dos o m√°s nombres.",
    "Dime los celulares que quieres comparar, por ejemplo: 'iPhone 13 vs Samsung Galaxy S21'",
    "Para comparar, necesito que me digas al menos dos modelos, como: 'Compara el Pixel 6 con el iPhone 12'"
]

COMPARISON_STARTS = [
    "¬°Perfecto! Aqu√≠ tienes la comparaci√≥n:",
    "Vamos a comparar estos modelos:",
    "Analizando las diferencias entre estos smartphones:"
]

@csrf_exempt
@require_http_methods(["POST", "OPTIONS"])
def chat(request):
    """
    Endpoint del chatbot con manejo expl√≠cito de CORS y gesti√≥n robusta de errores
    """
    # Manejo de peticiones OPTIONS (preflight CORS)
    if request.method == "OPTIONS":
        response = JsonResponse({}, status=200)
        response["Access-Control-Allow-Origin"] = "*"
        response["Access-Control-Allow-Methods"] = "POST, OPTIONS"
        response["Access-Control-Allow-Headers"] = "Content-Type"
        return response

    # Configurar respuesta CORS por defecto
    def build_response(data, status=200):
        response = JsonResponse(data, status=status)
        response["Access-Control-Allow-Origin"] = "*"
        return response

    # Manejo de peticiones POST
    try:
        # Validaci√≥n del cuerpo de la solicitud
        try:
            data = json.loads(request.body)
            user_message = data.get("message", "").strip()
            session_id = data.get("session_id", "default")
            
            if not user_message:
                logger.warning(f"Solicitud vac√≠a recibida - Session: {session_id}")
                return build_response({
                    "error": "Por favor, cu√©ntame qu√© celular o caracter√≠sticas est√°s buscando",
                    "options": ["Ver opciones", "Ayuda"]
                }, status=400)

        except json.JSONDecodeError as e:
            logger.error(f"Error de JSON - Session: {session_id} - Error: {str(e)}")
            return build_response({
                "error": "Formato de solicitud inv√°lido",
                "options": ["Reintentar", "Ayuda"]
            }, status=400)

        try:
            # Verificar si el usuario est√° en modo comparaci√≥n
            comparison_mode = cache.get(f"comparison_mode_{session_id}", False)
            
            # Procesamiento especial si est√° en modo comparaci√≥n
            if comparison_mode:
                logger.info(f"Modo comparaci√≥n activo - Session: {session_id}")
                # Limpiar el modo comparaci√≥n para futuras interacciones
                cache.delete(f"comparison_mode_{session_id}")
                cache.delete(f"comparison_phones_{session_id}")
                
                # Procesar la comparaci√≥n
                response_text = handle_comparison_request(user_message, session_id)
                options = ["Comparar otros", "Ver caracter√≠sticas", "Ayuda"]
            else:
                # Verificar si el mensaje ya contiene modelos para comparar
                phones_to_compare = extract_phones_from_query(user_message)
                
                if len(phones_to_compare) >= 2 and is_comparison_query(user_message):
                    logger.info(f"Comparaci√≥n directa detectada - Session: {session_id}")
                    response_text = handle_comparison_request(user_message, session_id)
                    options = ["Comparar otros", "Ver caracter√≠sticas", "Ayuda"]
                elif is_comparison_query(user_message):
                    logger.info(f"Solicitud de comparaci√≥n - Session: {session_id}")
                    response_text = random.choice(COMPARISON_PROMPTS)
                    # Activar modo comparaci√≥n para la siguiente interacci√≥n
                    cache.set(f"comparison_mode_{session_id}", True, timeout=60*5)
                    options = ["Cancelar comparaci√≥n"]
                else:
                    # Procesamiento normal para otras consultas
                    response_text = process_any_query(user_message)
                    options = get_contextual_options(user_message)
            
            logger.info(f"Respuesta exitosa - Session: {session_id}")
            return build_response({
                "response": response_text,
                "options": options,
                "source": "database"
            })

        except KeyError as e:
            logger.error(f"Falta campo en datos - Session: {session_id} - Error: {str(e)}")
            return build_response({
                "error": f"Falta informaci√≥n requerida: {str(e)}",
                "options": ["Reintentar", "Ayuda"]
            }, status=400)

        except ValueError as e:
            logger.error(f"Error de valor - Session: {session_id} - Error: {str(e)}")
            return build_response({
                "error": f"Datos inv√°lidos: {str(e)}",
                "options": ["Reintentar", "Ayuda"]
            }, status=400)

        except Exception as e:
            logger.error(f"Error al procesar mensaje - Session: {session_id} - Error: {str(e)}", exc_info=True)
            return build_response({
                "error": f"Error al procesar tu solicitud: {str(e)}",
                "options": ["Reintentar", "Ayuda"]
            }, status=500)

    except Exception as e:
        logger.critical(f"Error cr√≠tico en endpoint - Error: {str(e)}", exc_info=True)
        return build_response({
            "error": "Error interno del servidor. Por favor intenta m√°s tarde.",
            "options": ["Reintentar", "Contactar soporte"]
        }, status=500)


    except Exception as e:
        logger.error(f"Error en chat: {str(e)}")
        response = JsonResponse({
            "error": "Vaya, parece que hubo un problema. Por favor intenta con otra pregunta",
            "options": ["Reintentar", "Ayuda"]
        }, status=500)
        response["Access-Control-Allow-Origin"] = "*"
        return response

def is_comparison_query(query):
    """Determina si la consulta es una solicitud de comparaci√≥n"""
    query_lower = query.lower()
    
    # Lista ampliada de t√©rminos de comparaci√≥n
    comparison_terms = [
        'comparar', 'compara', 'comparemos', 'comparaci√≥n',
        'vs', 'versus', 'contra', 'frente a',
        'diferencia', 'diferencias', 'comparativa',
        'cu√°l es mejor', 'cu√°l es la diferencia'
    ]
    
    return any(term in query_lower for term in comparison_terms)

def handle_comparison_request(user_message, session_id):
    """Maneja una solicitud de comparaci√≥n entre smartphones"""
    try:
        # Extraer modelos a comparar del mensaje
        phones_to_compare = extract_phones_from_query(user_message)
        
        if len(phones_to_compare) < 2:
            return "Necesito al menos dos modelos para comparar. Por ejemplo: 'iPhone 13 vs Samsung Galaxy S21'"
        
        # Buscar los tel√©fonos en la base de datos
        found_phones = []
        not_found = []
        
        for phone_name in phones_to_compare:
            phone = find_phone_by_query(phone_name)
            if phone:
                found_phones.append(phone)
            else:
                not_found.append(phone_name)
        
        # Verificar que encontramos suficientes modelos
        if len(found_phones) < 2:
            error_msg = "No pude encontrar suficientes modelos para comparar."
            if not_found:
                error_msg += f" No encontr√©: {', '.join(not_found)}."
            error_msg += " Por favor intenta con otros nombres o m√°s espec√≠ficos."
            return error_msg
        
        # Limitar a 4 tel√©fonos para no saturar la comparaci√≥n
        found_phones = found_phones[:4]
        
        # Guardar los tel√©fonos encontrados en cach√© para posible uso posterior
        cache.set(f"comparison_phones_{session_id}", found_phones, timeout=60*5)
        
        # Generar la comparaci√≥n
        return generate_comparison_table(found_phones)
    
    except Exception as e:
        logger.error(f"Error en comparaci√≥n: {str(e)}")
        return "Hubo un problema al generar la comparaci√≥n. ¬øPodr√≠as intentarlo de nuevo con otros modelos?"

def extract_phones_from_query(query):
    """Extrae modelos de celulares de una consulta, con tolerancia a errores"""
    query_lower = query.lower()
    
    # Limpiar t√©rminos de comparaci√≥n
    clean_query = re.sub(
        r'(comparar|compara|comparemos|comparaci√≥n|vs|versus|contra|frente a|diferencia|diferencias|comparativa|cu√°l es mejor|cu√°l es la diferencia)',
        ',', 
        query_lower
    )
    
    # Dividir por comas y otros separadores
    potential_models = [m.strip() for m in re.split(r'[,&/]| y | con ', clean_query) if m.strip()]
    
    # Si encontramos al menos dos candidatos
    if len(potential_models) >= 2:
        # Intentar encontrar los modelos reales m√°s parecidos
        found_models = []
        for model in potential_models:
            phone = find_phone_by_query(model)
            if phone:
                found_models.append(phone['model'].lower())
        
        return found_models[:4]  # Limitar a 4 modelos m√°ximo
    
    # Si no, buscar modelos conocidos en la base de datos
    found_models = []
    for model in phone_index.keys():
        if similar(query_lower, model) > 0.7:  # Umbral de similitud
            found_models.append(model)
    
    # Eliminar duplicados manteniendo el orden
    seen = set()
    unique_models = [m for m in found_models if not (m in seen or seen.add(m))]
    
    return unique_models if len(unique_models) >= 2 else []

def generate_comparison_table(phones):
    """Genera una tabla de comparaci√≥n entre m√∫ltiples smartphones"""
    if len(phones) < 2:
        return "Necesito al menos dos modelos para comparar."
    
    # Seleccionar caracter√≠sticas relevantes para comparar
    features = [
        ('Marca', lambda p: p.get('brand_name', 'N/A')),
        ('Modelo', lambda p: p.get('model', 'N/A')),
        ('Precio', lambda p: f"${p.get('price', 'N/A'):,}" if isinstance(p.get('price'), (int, float)) else 'N/A'),
        ('Pantalla', lambda p: f"{p.get('screen_size', 'N/A')}\""),
        ('Resoluci√≥n', lambda p: f"{p.get('resolution_width', 'N/A')}x{p.get('resolution_height', 'N/A')}"),
        ('RAM', lambda p: f"{p.get('ram_capacity', 'N/A')}GB"),
        ('Almacenamiento', lambda p: f"{p.get('internal_memory', 'N/A')}GB"),
        ('C√°mara principal', lambda p: f"{p.get('primary_camera_rear', 'N/A')}MP"),
        ('C√°mara frontal', lambda p: f"{p.get('primary_camera_front', 'N/A')}MP"),
        ('Bater√≠a', lambda p: f"{p.get('battery_capacity', 'N/A')}mAh"),
        ('5G', lambda p: 'S√≠' if p.get('5G_or_not') else 'No'),
        ('Sistema', lambda p: p.get('os_version', 'N/A'))
    ]
    
    # Encabezado de la comparaci√≥n
    response = [random.choice(COMPARISON_STARTS)]
    
    # Crear tabla con formato Markdown para mejor visualizaci√≥n
    headers = ["**Caracter√≠stica**"] + [f"**{phone['brand_name']} {phone['model']}**" for phone in phones]
    response.append("| " + " | ".join(headers) + " |")
    response.append("|" + "|".join(["---"] * (len(phones) + 1)) + "|")
    
    # Filas de comparaci√≥n
    for feature_name, feature_func in features:
        row = [f"**{feature_name}**"]
        for phone in phones:
            row.append(feature_func(phone))
        response.append("| " + " | ".join(row) + " |")
    
    # A√±adir observaciones finales
    response.append("\n\n**üîç Observaciones clave:**")
    
    # Comparar precios si est√°n disponibles
    valid_prices = [p.get('price') for p in phones if isinstance(p.get('price'), (int, float))]
    if valid_prices:
        min_price = min(valid_prices)
        max_price = max(valid_prices)
        if min_price != max_price:
            cheapest = [p for p in phones if p.get('price') == min_price][0]
            response.append(f"- **M√°s econ√≥mico:** {cheapest['brand_name']} {cheapest['model']} (${min_price:,})")
    
    # Comparar c√°maras
    cameras = [p.get('primary_camera_rear', 0) for p in phones if isinstance(p.get('primary_camera_rear'), (int, float))]
    if cameras:
        best_cam = max(cameras)
        best_cam_phones = [p for p in phones if p.get('primary_camera_rear') == best_cam]
        if len(best_cam_phones) == 1:
            response.append(f"- **Mejor c√°mara:** {best_cam_phones[0]['brand_name']} {best_cam_phones[0]['model']} ({best_cam}MP)")
    
    # Comparar bater√≠as
    batteries = [p.get('battery_capacity', 0) for p in phones if isinstance(p.get('battery_capacity'), (int, float))]
    if batteries:
        best_bat = max(batteries)
        best_bat_phones = [p for p in phones if p.get('battery_capacity') == best_bat]
        if len(best_bat_phones) == 1:
            response.append(f"- **Mayor bater√≠a:** {best_bat_phones[0]['brand_name']} {best_bat_phones[0]['model']} ({best_bat}mAh)")
    
    response.append("\n¬øTe gustar√≠a comparar otros modelos o m√°s detalles de alguno?")
    
    return "\n".join(response)

def get_contextual_options(user_message):
    """Devuelve opciones contextuales basadas en la consulta del usuario"""
    user_message = user_message.lower()
    
    if any(term in user_message for term in ['hola', 'buenos d√≠as', 'inicio']):
        return ["Ver celulares", "Ofertas", "Ayuda"]
    
    if any(term in user_message for term in ['comparar', 'vs', 'versus', 'diferencia']):
        return ["Comparar por precio", "Comparar por c√°mara", "Comparar por bater√≠a"]
    
    if any(term in user_message for term in ['5g', '5 g']):
        return ["5G econ√≥micos", "Mejor 5G", "Comparar modelos 5G"]
    
    if any(term in user_message for term in ['c√°mara', 'camara', 'foto']):
        return ["Mejor c√°mara", "Selfies", "Comparar c√°maras"]
    
    if any(term in user_message for term in ['precio', 'econ√≥mi', 'barat']):
        return ["Menos de $10,000", "$10,000-$20,000", "Comparar precios"]
    
    if any(term in user_message for term in ['recomienda', 'sugiere']):
        return ["Para fotos", "Para juegos", "Comparar recomendaciones"]
    
    return ["Comparar modelos", "Ayuda", "Limpiar chat"]

def find_phone_by_query(query):
    """Busca tel√©fonos que coincidan con la consulta, permitiendo errores menores"""
    query_lower = query.lower().strip()
    
    # 1. Coincidencia exacta en modelos (case insensitive)
    for model, phone in phone_index.items():
        if query_lower == model.lower():
            return phone
    
    # 2. Coincidencia exacta en marca + modelo
    for phone in smartphones_data:
        full_name = f"{phone['brand_name'].lower()} {phone['model'].lower()}"
        if query_lower == full_name:
            return phone
    
    # 3. B√∫squeda aproximada con tolerancia a errores
    best_match = None
    best_score = 0
    
    for phone in smartphones_data:
        # Opci√≥n 1: Buscar en marca + modelo
        full_name = f"{phone['brand_name'].lower()} {phone['model'].lower()}"
        
        # Opci√≥n 2: Buscar solo en modelo
        model_only = phone['model'].lower()
        
        # Calcular similitud para ambas opciones
        score_full = similar(query_lower, full_name)
        score_model = similar(query_lower, model_only)
        
        # Quedarnos con el mejor score
        current_score = max(score_full, score_model)
        
        if current_score > best_score and current_score > 0.6:  # Umbral de similitud
            best_score = current_score
            best_match = phone
    
    return best_match

def similar(a, b):
    """Calcula la similitud entre dos cadenas (0 a 1)"""
    from difflib import SequenceMatcher
    return SequenceMatcher(None, a, b).ratio()

def find_phones_by_brand(brand_query):
    """
    Busca todos los tel√©fonos de una marca espec√≠fica
    Permite b√∫squeda flexible (ej: 'sams' encontrar√° 'Samsung')
    """
    brand_query_lower = brand_query.lower().strip()
    
    # Primero buscar coincidencia exacta
    exact_match = [phone for phone in smartphones_data 
                  if phone.get('brand_name', '').lower() == brand_query_lower]
    if exact_match:
        return exact_match
    
    # Si no hay coincidencia exacta, buscar parcial
    partial_match = [phone for phone in smartphones_data 
                    if brand_query_lower in phone.get('brand_name', '').lower()]
    return partial_match

def generate_brand_response(phones, brand_query):
    """Genera una respuesta con 5 modelos aleatorios de una marca"""
    if not phones:
        return f"No encontr√© modelos de la marca {brand_query} en nuestra base de datos."
    
    # Seleccionar 5 modelos aleatorios (o menos si no hay suficientes)
    random.shuffle(phones)
    sample_phones = phones[:5]
    
    # Obtener el nombre de la marca correctamente capitalizado
    brand_name = sample_phones[0]['brand_name'] if sample_phones else brand_query
    
    intro = random.choice([
        f"Estos son algunos modelos de {brand_name} que tenemos disponibles:",
        f"Encontramos estos modelos de {brand_name} en nuestro cat√°logo:",
        f"De la marca {brand_name}, te puedo mostrar estos modelos:"
    ])
    
    response = [intro]
    
    for i, phone in enumerate(sample_phones, 1):
        price_info = f" - ${phone.get('price', 'N/A'):,}" if isinstance(phone.get('price'), (int, float)) else ""
        features = []
        if 'ram_capacity' in phone:
            features.append(f"{phone['ram_capacity']}GB RAM")
        if 'internal_memory' in phone:
            features.append(f"{phone['internal_memory']}GB")
        if 'primary_camera_rear' in phone:
            features.append(f"{phone['primary_camera_rear']}MP")
        
        features_str = " | ".join(features) if features else ""
        
        response.append(
            f"\n{i}. {phone['model']}{price_info}"
            f"{' - ' + features_str if features_str else ''}"
        )
    
    response.append("\n\n¬øQuieres m√°s detalles de alg√∫n modelo en particular?")
    response.append(f"Puedes preguntar: 'Mostrar detalles del {sample_phones[0]['model']}'")
    response.append("O tambi√©n: 'Comparar [modelo1] vs [modelo2]'")
    
    return "\n".join(response)

def process_any_query(query):
    """
    Procesa cualquier tipo de consulta sobre caracter√≠sticas de celulares
    con respuestas naturales y completas
    """
    query_lower = query.lower()
    
    # Detecci√≥n de saludos
    if any(term in query_lower for term in ['hola', 'buenos d√≠as', 'buenas tardes']):
        return random.choice(GREETINGS)
    
    # Detecci√≥n de despedidas
    if any(term in query_lower for term in ['gracias', 'adi√≥s', 'hasta luego', 'chao']):
        return random.choice(FAREWELLS)
    
    # Detecci√≥n de ayuda
    if any(term in query_lower for term in ['ayuda', 'qu√© puedes hacer', 'opciones']):
        return generate_help_response()
    
    # Detecci√≥n de comparaci√≥n (NUEVA VERSI√ìN)
    if is_comparison_query(query):
        return random.choice(COMPARISON_PROMPTS)
    
    # 0. B√∫squeda por marca (NUEVA SECCI√ìN)
    # Primero verificamos si la consulta coincide con una marca
    brand_phones = find_phones_by_brand(query)
    if brand_phones:
        # Verificar si el usuario pidi√≥ espec√≠ficamente "modelos de [marca]"
        if any(term in query_lower for term in ['modelos de', 'modelos', 'celulares de', 'tel√©fonos de']):
            return generate_brand_response(brand_phones, query)
        # Si no, verificar si la consulta es solo la marca (sin otras palabras)
        elif len(query.split()) == 1 or query_lower.replace(" ", "") == brand_phones[0]['brand_name'].lower().replace(" ", ""):
            return generate_brand_response(brand_phones, query)
    
    # 1 B√∫squeda por modelo espec√≠fico (CON TOLERANCIA A ERRORES)
    matched_phone = find_phone_by_query(query)
    if matched_phone:
        return generate_phone_details(matched_phone, query)

    # 2. B√∫squeda por caracter√≠sticas especiales (se mantiene igual)
    if any(term in query_lower for term in ['econ√≥mi', 'barat', 'precio']):
        if '5g' in query_lower:
            return handle_5g_affordable_query(query)
        return handle_price_query(query)
    
    if any(term in query_lower for term in ['c√°mara', 'camara', 'foto', 'fotograf√≠a']):
        return handle_camera_query(query)
    
    if any(term in query_lower for term in ['pantalla', 'display', 'pantall']):
        return handle_display_query(query)
    
    if any(term in query_lower for term in ['bater√≠a', 'bateria', 'duraci']):
        return handle_battery_query(query)
    
    if any(term in query_lower for term in ['5g', '5 g']):
        return handle_5g_query(query)
    
    if any(term in query_lower for term in ['ram', 'procesador', 'rendimiento', 'velocidad']):
        return handle_performance_query(query)
    
    if any(term in query_lower for term in ['recomienda', 'sugiere', 'mejor']):
        return handle_recommendation_query(query)
    
    # 3. B√∫squeda gen√©rica (se mantiene igual)
    return handle_general_query(query)

def generate_help_response():
    """Genera una respuesta de ayuda m√°s natural y completa"""
    help_options = [
        "üîç B√∫squeda por modelo espec√≠fico (ej: 'iPhone 13')",
        "üí∞ Tel√©fonos por rango de precios (ej: 'opciones econ√≥micas')",
        "üì∏ Dispositivos con buena c√°mara (ej: 'para tomar fotos')",
        "üîã Celulares con mucha bater√≠a (ej: 'que dure todo el d√≠a')",
        "‚ö° Opciones de alto rendimiento (ej: 'para juegos')",
        "üñ•Ô∏è Pantallas de calidad (ej: 'con buena pantalla')",
        "üì∂ Tecnolog√≠a 5G (ej: 'con 5G')",
        "üÜö Comparar modelos (ej: 'iPhone 13 vs Samsung S21')",
        "\nPuedes preguntarme de forma natural, como:",
        "'¬øQu√© celular me recomiendas para fotos?'",
        "'Quiero un smartphone econ√≥mico con buena bater√≠a'",
        "'Compara el Pixel 6 con el Galaxy S22'"
    ]
    
    return f"{random.choice(HELP_RESPONSES)}\n" + "\n".join(help_options)

def generate_phone_details(phone, original_query):
    """Genera una descripci√≥n m√°s humana y completa del tel√©fono"""
    # Respuestas introductorias aleatorias
    intros = [
        f"¬°Claro! Aqu√≠ tienes los detalles del {phone['brand_name']} {phone['model']}:",
        f"Conozco ese modelo. El {phone['brand_name']} {phone['model']} tiene estas caracter√≠sticas:",
        f"¬°Buena elecci√≥n! El {phone['brand_name']} {phone['model']} es un excelente dispositivo. Te cuento m√°s:"
    ]
    
    details = [random.choice(intros)]
    
    # Precio con comentario contextual
    if 'price' in phone:
        price_comment = ""
        if phone['price'] < 15000:
            price_comment = random.choice(PRICE_COMMENTS['low'])
        elif phone['price'] < 30000:
            price_comment = random.choice(PRICE_COMMENTS['mid'])
        else:
            price_comment = random.choice(PRICE_COMMENTS['high'])
        details.append(f"- üíµ *Precio:* ${phone['price']:,}{price_comment}")
    
    # Caracter√≠sticas con lenguaje m√°s natural
    if '5G_or_not' in phone:
        network = "S√≠, cuenta con 5G para m√°xima velocidad üì∂" if phone['5G_or_not'] else "Tiene 4G LTE, suficiente para el d√≠a a d√≠a"
        details.append(f"- *Redes:* {network}")
    
    if all(k in phone for k in ['resolution_width', 'resolution_height']):
        details.append(f"- üñ•Ô∏è *Pantalla:* Resoluci√≥n de {phone['resolution_width']}x{phone['resolution_height']} px (muy n√≠tida)")
    
    if 'ram_capacity' in phone and 'internal_memory' in phone:
        ram_comment = " (ideal para multitarea)" if phone['ram_capacity'] >= 6 else " (suficiente para uso normal)"
        details.append(f"- ‚ö° *Memoria:* {phone['ram_capacity']}GB RAM{ram_comment} + {phone['internal_memory']}GB de almacenamiento")
    
    if 'battery_capacity' in phone:
        battery_comment = ""
        if phone['battery_capacity'] > 4500:
            battery_comment = " (¬°Duraci√≥n excelente! üîã)"
        elif phone['battery_capacity'] < 3000:
            battery_comment = " (Recomendable para uso moderado)"
        
        charging = f" y carga r√°pida de {phone['fast_charging']}W" if 'fast_charging' in phone else ""
        details.append(f"- *Bater√≠a:* {phone['battery_capacity']}mAh{charging}{battery_comment}")
    
    if all(k in phone for k in ['primary_camera_rear', 'num_rear_cameras']):
        camera_comment = ""
        if phone['primary_camera_rear'] >= 48:
            camera_comment = " (¬°Fotos profesionales! üì∏)"
        details.append(f"- *C√°mara trasera:* {phone['primary_camera_rear']}MP con {phone['num_rear_cameras']} lentes{camera_comment}")
    
    # Recomendaci√≥n personalizada basada en caracter√≠sticas
    recommendation = ""
    if phone.get('avg_rating', 0) >= 4.5:
        recommendation = "\nüåü *Opini√≥n de clientes:* ¬°Muy bien valorado por los usuarios! Un acierto seguro."
    elif phone.get('price', 0) < 20000 and phone.get('ram_capacity', 0) >= 4:
        recommendation = "\nüí° *Mi opini√≥n:* Excelente opci√≥n si buscas buen rendimiento sin gastar mucho."
    elif 'gaming' in original_query.lower() and phone.get('ram_capacity', 0) >= 6:
        recommendation = "\nüéÆ *Para gaming:* Este modelo manejar√° bien los juegos m√°s demandantes."
    
    if recommendation:
        details.append(recommendation)
    
    # Pregunta de seguimiento
    follow_ups = [
        "\n¬øTe gustar√≠a compararlo con otro modelo?",
        "\n¬øQuieres que te sugiera accesorios para este dispositivo?",
        "\n¬øNecesitas m√°s informaci√≥n sobre alguna caracter√≠stica en particular?"
    ]
    details.append(random.choice(follow_ups))
    
    return "\n".join(details)

def handle_5g_affordable_query(query):
    """Respuesta mejorada para 5G econ√≥mico"""
    try:
        affordable_5g = sorted(
            [p for p in smartphones_data if p.get('5G_or_not') and p.get('price')],
            key=lambda x: x['price']
        )[:5]
        
        if not affordable_5g:
            return "Por el momento no tenemos modelos 5G en el rango econ√≥mico, pero puedo mostrarte algunas opciones 4G LTE con buena relaci√≥n calidad-precio."
        
        intro = random.choice([
            "Entiendo que buscas lo mejor de ambos mundos: tecnolog√≠a 5G sin gastar mucho. Estas son las opciones m√°s accesibles:",
            "¬°Buena idea! Tener 5G ya no tiene que ser caro. Mira estas alternativas econ√≥micas:",
            "Aqu√≠ tienes smartphones con 5G que no romper√°n tu presupuesto:"
        ])
        
        response = [intro]
        for i, phone in enumerate(affordable_5g, 1):
            price_comment = ""
            if phone['price'] < 18000:
                price_comment = random.choice(PRICE_COMMENTS['low'])
            
            response.append(
                f"\n{i}. *{phone['brand_name']} {phone['model']}*"
                f"\n   - Precio: ${phone['price']:,}{price_comment}"
                f"\n   - Pantalla: {phone.get('screen_size', 'N/A')}\""
                f"\n   - Bater√≠a: {phone.get('battery_capacity', 'N/A')}mAh"
                f"\n   - RAM: {phone.get('ram_capacity', 'N/A')}GB"
            )
        
        advice = "\n\nüí° Consejo: Los modelos con 5G suelen consumir m√°s bater√≠a. Si priorizas duraci√≥n, considera tambi√©n la capacidad de la bater√≠a."
        response.append(advice)
        
        response.append("\n¬øQuieres m√°s detalles de alguno en particular?")
        return "\n".join(response)
    
    except Exception as e:
        logger.error(f"Error en consulta de 5G econ√≥mico: {str(e)}")
        return "Vaya, hubo un problema al buscar esas opciones. ¬øTe importar√≠a intentarlo de nuevo m√°s tarde?"

def handle_camera_query(query):
    """Respuesta mejorada para c√°maras"""
    try:
        # Priorizar c√°maras con m√∫ltiples lentes y alta resoluci√≥n
        best_cameras = sorted(
            [p for p in smartphones_data if p.get('primary_camera_rear')],
            key=lambda x: (x.get('num_rear_cameras', 1), x['primary_camera_rear']),
            reverse=True
        )[:5]
        
        if not best_cameras:
            return "Actualmente no tengo los datos de c√°mara disponibles. ¬øTe interesa que te recomiende por otra caracter√≠stica?"
        
        # Contextualizar seg√∫n la consulta
        if 'selfie' in query.lower() or 'frontal' in query.lower():
            intro = "Si lo que buscas es buena c√°mara frontal para selfies, estos modelos destacan:"
            key_camera = 'primary_camera_front'
        else:
            intro = random.choice([
                "Para fotograf√≠a profesional, estos smartphones tienen excelentes c√°maras traseras:",
                "Si la c√°mara es tu prioridad, no te decepcionar√°n estos modelos:",
                "Aqu√≠ tienes los celulares que mejor capturan tus momentos especiales:"
            ])
            key_camera = 'primary_camera_rear'
        
        response = [intro]
        
        for i, phone in enumerate(best_cameras, 1):
            camera_specs = []
            
            # Especificaciones traseras
            if 'num_rear_cameras' in phone:
                camera_specs.append(f"{phone['num_rear_cameras']} lentes traseros")
                if phone['num_rear_cameras'] >= 3:
                    camera_specs[-1] += " (incluyendo ultra wide y telephoto)"
            
            if 'primary_camera_rear' in phone:
                camera_specs.append(f"{phone['primary_camera_rear']}MP principal")
            
            # Especificaciones frontales si es relevante
            if ('selfie' in query.lower() or 'frontal' in query.lower()) and 'primary_camera_front' in phone:
                camera_specs.append(f"{phone['primary_camera_front']}MP frontal")
            
            # Estabilizaci√≥n √≥ptica
            if phone.get('optical_image_stabilization'):
                camera_specs.append("con estabilizaci√≥n √≥ptica")
            
            response.append(
                f"\n{i}. *{phone['brand_name']} {phone['model']}*"
                f"\n   - {' + '.join(camera_specs)}"
                f"\n   - Precio: ${phone.get('price', 'N/A'):,}"
            )
        
        # Consejo adicional
        advice = "\n\nüì∏ Tip profesional: M√°s megap√≠xeles no siempre significan mejor calidad. El tama√±o del sensor y el software de procesamiento son igual de importantes."
        response.append(advice)
        
        response.append("\n¬øTe gustar√≠a comparar las c√°maras de dos modelos?")
        return "\n".join(response)
    
    except Exception as e:
        logger.error(f"Error en consulta de c√°mara: {str(e)}")
        return "Hubo un problema al buscar esa informaci√≥n. ¬øQuieres intentar con otra caracter√≠stica?"

def handle_recommendation_query(query):
    """Nueva funci√≥n para manejar solicitudes de recomendaci√≥n"""
    try:
        # Analizar la consulta para determinar prioridades
        priorities = {
            'camera': any(term in query.lower() for term in ['c√°mara', 'camara', 'foto', 'fotograf√≠a']),
            'battery': any(term in query.lower() for term in ['bater√≠a', 'bateria', 'duraci']),
            'performance': any(term in query.lower() for term in ['velocidad', 'r√°pido', 'juegos', 'rendimiento']),
            'price': any(term in query.lower() for term in ['econ√≥mi', 'barat', 'precio']),
            'display': any(term in query.lower() for term in ['pantalla', 'display', 'pantall'])
        }
        
        # Determinar el tipo de recomendaci√≥n
        if sum(priorities.values()) == 0:  # Si no se especific√≥ nada
            return ("Cu√©ntame m√°s sobre lo que buscas. Por ejemplo: "
                   "'Recomi√©ndame un celular para fotos', "
                   "'Quiero un smartphone econ√≥mico con buena bater√≠a', "
                   "o 'Necesito un tel√©fono potente para juegos'")
        
        # Filtrar y ordenar seg√∫n prioridades
        candidates = smartphones_data.copy()
        
        if priorities['price']:
            candidates = [p for p in candidates if p.get('price')]
            candidates.sort(key=lambda x: x['price'])
        
        if priorities['camera']:
            candidates.sort(key=lambda x: x.get('primary_camera_rear', 0), reverse=True)
        
        if priorities['battery']:
            candidates.sort(key=lambda x: x.get('battery_capacity', 0), reverse=True)
        
        if priorities['performance']:
            candidates.sort(key=lambda x: (x.get('ram_capacity', 0), x.get('processor_speed', 0)), reverse=True)
        
        if priorities['display']:
            candidates.sort(key=lambda x: x.get('screen_size', 0), reverse=True)
        
        # Tomar los 3 mejores candidatos
        top_recommendations = candidates[:3]
        
        if not top_recommendations:
            return "No encontr√© opciones que coincidan exactamente. ¬øQuieres intentar con criterios m√°s amplios?"
        
        # Construir respuesta contextual
        response = ["Bas√°ndome en lo que me comentas, te recomendar√≠a:"]
        
        for i, phone in enumerate(top_recommendations, 1):
            highlights = []
            
            if priorities['price'] and phone['price'] < 20000:
                highlights.append("excelente precio")
            
            if priorities['camera'] and phone.get('primary_camera_rear', 0) >= 48:
                highlights.append("c√°mara profesional")
            
            if priorities['battery'] and phone.get('battery_capacity', 0) > 4500:
                highlights.append("bater√≠a de larga duraci√≥n")
            
            if priorities['performance'] and phone.get('ram_capacity', 0) >= 6:
                highlights.append("alto rendimiento")
            
            if priorities['display'] and phone.get('screen_size', 0) >= 6.5:
                highlights.append("pantalla grande")
            
            response.append(
                f"\n{i}. *{phone['brand_name']} {phone['model']}*"
                f"\n   - Destaca por: {', '.join(highlights)}"
                f"\n   - Precio: ${phone.get('price', 'N/A'):,}"
            )
        
        response.append("\n¬øQuieres m√°s detalles de alguna de estas opciones?")
        return "\n".join(response)
    
    except Exception as e:
        logger.error(f"Error en recomendaci√≥n: {str(e)}")
        return "Vaya, tuve un problema al analizar tus necesidades. ¬øPodr√≠as intentar formular tu solicitud de otra forma?"

def handle_performance_query(query):
    """Maneja consultas sobre rendimiento (RAM y procesador)"""
    try:
        # Ordenar por RAM y velocidad de procesador
        performance_phones = sorted(
            [p for p in smartphones_data if p.get('ram_capacity') and p.get('processor_speed')],
            key=lambda x: (x['ram_capacity'], x['processor_speed']),
            reverse=True
        )[:5]
        
        if not performance_phones:
            return "No tenemos informaci√≥n de rendimiento para mostrar en este momento."
        
        intro = random.choice([
            "Si buscas potencia, estos son los modelos con mejor rendimiento:",
            "Para tareas exigentes o juegos, te recomendar√≠a estos smartphones:",
            "Estos celulares ofrecen el m√°ximo desempe√±o:"
        ])
        
        response = [intro]
        for i, phone in enumerate(performance_phones, 1):
            perf_comment = ""
            if phone['ram_capacity'] >= 8 and phone['processor_speed'] >= 2.5:
                perf_comment = " (¬°Excelente para gaming! üéÆ)"
            elif phone['ram_capacity'] >= 6:
                perf_comment = " (Ideal para multitarea)"
            
            response.append(
                f"\n{i}. *{phone['brand_name']} {phone['model']}*"
                f"\n   üöÄ {phone['ram_capacity']}GB RAM + {phone['processor_speed']}GHz{perf_comment}"
                f"\n   üíµ ${phone.get('price', 'N/A'):,}"
            )
        
        response.append("\n¬øNecesitas m√°s detalles de alguno?")
        return "\n".join(response)
    
    except Exception as e:
        logger.error(f"Error en consulta de rendimiento: {str(e)}")
        return "No pude obtener la informaci√≥n de rendimiento."

def handle_battery_query(query):
    """Maneja consultas sobre bater√≠a"""
    try:
        battery_phones = sorted(
            [p for p in smartphones_data if p.get('battery_capacity')],
            key=lambda x: x['battery_capacity'],
            reverse=True
        )[:5]
        
        if not battery_phones:
            return "No tenemos informaci√≥n sobre bater√≠as en este momento."
        
        intro = random.choice([
            "Si lo que buscas es que la bater√≠a te dure todo el d√≠a, estos modelos son ideales:",
            "Para no preocuparte por cargar tu celular constantemente, considera estas opciones:",
            "Estos smartphones tienen las bater√≠as m√°s grandes del mercado:"
        ])
        
        response = [intro]
        for i, phone in enumerate(battery_phones, 1):
            battery_comment = ""
            if phone['battery_capacity'] > 5000:
                battery_comment = " (¬°Duraci√≥n excepcional! ‚ö°)"
            
            charging = f"\n   üîå Carga r√°pida de {phone['fast_charging']}W" if 'fast_charging' in phone else ""
            response.append(
                f"\n{i}. *{phone['brand_name']} {phone['model']}*"
                f"\n   üîã {phone['battery_capacity']}mAh{battery_comment}{charging}"
                f"\n   üíµ ${phone.get('price', 'N/A'):,}"
            )
        
        advice = "\nüí° Tip: La duraci√≥n real depende de tu uso. Pantallas grandes y 5G consumen m√°s bater√≠a."
        response.append(advice)
        
        response.append("\n¬øTe interesa alguno en particular?")
        return "\n".join(response)
    
    except Exception as e:
        logger.error(f"Error en consulta de bater√≠a: {str(e)}")
        return "No pude obtener la informaci√≥n de bater√≠as."

def handle_display_query(query):
    """Maneja consultas sobre pantallas"""
    try:
        display_phones = sorted(
            [p for p in smartphones_data if p.get('screen_size') and p.get('refresh_rate')],
            key=lambda x: (x['screen_size'], x['refresh_rate']),
            reverse=True
        )[:5]
        
        if not display_phones:
            return "No tenemos informaci√≥n detallada sobre pantallas en este momento."
        
        intro = random.choice([
            "Para una experiencia visual incre√≠ble, estos smartphones tienen las mejores pantallas:",
            "Si valoras mucho la calidad de imagen, considera estos modelos:",
            "Estas son las opciones con pantallas m√°s avanzadas:"
        ])
        
        response = [intro]
        for i, phone in enumerate(display_phones, 1):
            display_comment = ""
            if phone['refresh_rate'] >= 90:
                display_comment = " (Ultra fluida)"
            if phone['screen_size'] >= 6.7:
                display_comment += " (Pantalla grande)"
            
            response.append(
                f"\n{i}. *{phone['brand_name']} {phone['model']}*"
                f"\n   üñ•Ô∏è {phone['screen_size']}\" | {phone['refresh_rate']}Hz{display_comment}"
                f"\n   üíµ ${phone.get('price', 'N/A'):,}"
            )
        
        response.append("\n¬øNecesitas m√°s detalles?")
        return "\n".join(response)
    
    except Exception as e:
        logger.error(f"Error en consulta de pantalla: {str(e)}")
        return "No pude obtener la informaci√≥n de pantallas."

def handle_5g_query(query):
    """Maneja consultas sobre 5G"""
    try:
        phones_5g = [p for p in smartphones_data if p.get('5G_or_not')][:5]
        
        if not phones_5g:
            return "Actualmente no tenemos modelos con 5G en nuestro cat√°logo."
        
        intro = random.choice([
            "La tecnolog√≠a 5G ofrece velocidades ultrarr√°pidas. Estos modelos la incluyen:",
            "Para futuro-proof tu compra, estos smartphones con 5G son excelentes opciones:",
            "Estos son nuestros modelos compatibles con redes 5G:"
        ])
        
        response = [intro]
        for i, phone in enumerate(phones_5g, 1):
            response.append(
                f"\n{i}. *{phone['brand_name']} {phone['model']}*"
                f"\n   üíµ ${phone.get('price', 'N/A'):,}"
                f"\n   ‚ö° {phone.get('ram_capacity', 'N/A')}GB RAM"
            )
        
        advice = "\n‚ÑπÔ∏è Recuerda que para aprovechar el 5G necesitas: 1) Un plan que lo incluya, 2) Cobertura en tu zona."
        response.append(advice)
        
        response.append("\n¬øQuieres m√°s informaci√≥n de alguno?")
        return "\n".join(response)
    
    except Exception as e:
        logger.error(f"Error en consulta de 5G: {str(e)}")
        return "No pude obtener la informaci√≥n sobre 5G."

def handle_price_query(query):
    """Maneja consultas sobre precios"""
    try:
        if 'bajo' in query.lower() or 'econ√≥mi' in query.lower():
            affordable = sorted(
                [p for p in smartphones_data if p.get('price')],
                key=lambda x: x['price']
            )[:5]
            
            if not affordable:
                return "No tenemos opciones econ√≥micas en este momento."
            
            intro = random.choice([
                "Estas son las opciones m√°s accesibles sin sacrificar calidad:",
                "Si buscas ahorrar, estos smartphones ofrecen buena relaci√≥n calidad-precio:",
                "Para presupuestos ajustados, considera estos modelos:"
            ])
            
            response = [intro]
            for i, phone in enumerate(affordable, 1):
                price_comment = random.choice(PRICE_COMMENTS['low']) if phone['price'] < 15000 else ""
                response.append(
                    f"\n{i}. *{phone['brand_name']} {phone['model']}*"
                    f"\n   üíµ ${phone['price']:,}{price_comment}"
                    f"\n   ‚ö° {phone.get('ram_capacity', 'N/A')}GB RAM"
                )
            
            advice = "\nüí° En gama baja, revisa bien: 1) Actualizaciones de software, 2) Almacenamiento expandible."
            response.append(advice)
            
            response.append("\n¬øTe interesa alguno?")
            return "\n".join(response)
        
        elif 'medio' in query.lower() or 'intermedio' in query.lower():
            mid_range = sorted(
                [p for p in smartphones_data if p.get('price') and 15000 <= p['price'] <= 30000],
                key=lambda x: x['price']
            )[:5]
            
            if not mid_range:
                return "No tenemos opciones en gama media en este momento."
            
            intro = "En gama media encuentras el mejor balance entre precio y caracter√≠sticas:"
            response = [intro]
            
            for i, phone in enumerate(mid_range, 1):
                response.append(
                    f"\n{i}. *{phone['brand_name']} {phone['model']}*"
                    f"\n   üíµ ${phone['price']:,}{random.choice(PRICE_COMMENTS['mid'])}"
                    f"\n   ‚ö° {phone.get('ram_capacity', 'N/A')}GB RAM"
                    f"\n   üì∏ {phone.get('primary_camera_rear', 'N/A')}MP c√°mara"
                )
            
            response.append("\n¬øQuieres detalles de alg√∫n modelo?")
            return "\n".join(response)
        
        else:
            return handle_general_query(query)
    
    except Exception as e:
        logger.error(f"Error en consulta de precio: {str(e)}")
        return "No pude obtener la informaci√≥n de precios."

def handle_general_query(query):
    """Maneja consultas gen√©ricas con sugerencias √∫tiles"""
    suggestions = [
        "Parece que buscas informaci√≥n sobre smartphones. Puedo ayudarte con:",
        "- üì∏ *Recomendaciones por c√°mara*: '¬øCu√°l tiene mejor c√°mara para fotos?'",
        "- üîã *Duraci√≥n de bater√≠a*: 'Quiero un celular que dure todo el d√≠a'",
        "- ‚ö° *Rendimiento*: 'Necesito un tel√©fono r√°pido para juegos'",
        "- üí∞ *Por presupuesto*: 'Opciones econ√≥micas', 'Gama media', 'Premium'",
        "- üñ•Ô∏è *Pantallas*: 'Qu√© modelo tiene mejor display'",
        "- üì∂ *Tecnolog√≠a*: 'Celulares con 5G'",
        "- üÜö *Comparaciones*: 'iPhone 13 vs Samsung S21'",
        "\nPuedes preguntarme de forma natural como:",
        "'Recomi√©ndame un celular para mi mam√°'",
        "'Quiero un smartphone con buena c√°mara y bater√≠a'",
        "'Compara el iPhone 12 con el Pixel 6'"
    ]
    return "\n".join(suggestions)